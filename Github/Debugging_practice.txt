# Programmers_실습 중_Debugging 에 대하여

- 실습 에서는 연습이기 때문에 각자의 디버깅 환경을 이용해 충분히 테스트, 검증하여 코드 제출이 가능함.
- 이 때, "발생할 수 있는 모든 경우의 수에 대 한 테스트"를 하려면 어떤 케이스들을 설계해야 할지, 그것이 불가능하다면 어떤 전략으로 충분하다고 여겨질만한 테스트를 수행할 수 있을지 생각해보고 케이스를 직접 구현하여 테스트해보는 것이 매우 중요함.
-- '테스트 케이스가 올바르다'=특정 입력에 대해 예쌍하는 결과가 도출되는지를 논리적 오류 없이 검사한다는 듯.
-- '테스트 케이스가 완전하다'=케이스들의 집합(suite)가 검사해야 하는 모든 측면을 다루고(coverage)있다는 뜻
-> 올바르고 완전한 테스트 케이스들을 작성하여 직접 테스트하는 방법과 습관 익힐 것! 소프트웨어 개발자로 일하게 될 경우, 자신이 작성한 코드의 단위 테스트는 해당 개발자의 몫
- 

Ex) 알고리즘이 올바르지 않고, 코드 구현에서 실수가 있었던 경우라면, 코드 실행해보지 않고는 발견 어려움.

- Python 에서 널리 이용되는 단위테스트 프레임워크 'unittest' 활용법 익히는 것도 유용
-- 코드의 오류는 Error로 테스트 케이스에 대해서 올바르지 않은 결과는 Fail로 구별하여 사용자에게 말해줌.
-- 테스트 과정에서 Error과 Fail을 모두 없애면(테스트 케이스가 모두 올바르고 완전하게 구성되어있다는 전제 하에) 그 코드는 검증된 코드
--- 소프트 개발에서, 작성된 코드가 만족해야 할 조건을 테스트 케이스로 먼저 구성하고 나서 Fail을 확인한 후에 케이스들을 하나하나 만족시키도록 코드 개발해가는 방법도 많이 이용 됨.
= TDD(Test-Driven Development)



